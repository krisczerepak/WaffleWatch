#include <Arduino.h>
#include "esp_system.h"
#include <string>
#include <iostream>

using std::string;

class WaffleIronSemaphore {
	public:
	SemaphoreHandle_t SausageMcmuffinSemaphore;
	WaffleIronSemaphore();
	void CreateSemaphore();
	void TakeSemaphore();
	string PoachedEggs;
	private:
};

SemaphoreHandle_t SemaphoreCook;
WaffleIronSemaphore TheBaconator;
bool debug_my_breakfast=true;

void WaffleMakingTask(void *pvParameter) { //void *pvParameter required per reference manual page 38
	std::cout<<"Adress of null Pointer is " << pvParameter <<std::endl;
	/*if (pvParameter == nullptr) {
		Serial.println("Not Good");
	} */
	//WaffleIronSemaphore* WafISem= static_cast<WaffleIronSemaphore*>(pvParameter);
	//WaffleIronSemaphore& WaffleSme= *WafISem;
	Serial.println("New Eggs Are");
	Serial.println(TheBaconator.PoachedEggs.c_str());
	//Serial.println(*WafISem.PoachedEggs.c_str());
	//Serial.println(*WafISem->PoachedEggs.c_str());
	//*WafISem=pvParameter;
	//WaffleIronSemaphore& WafIronSem = 
	for (;true;) {
		//TheBaconator.
		if(xSemaphoreTake(TheBaconator.SausageMcmuffinSemaphore, 1000) == pdTRUE) {
			Serial.println("Semaphore Take Sucesfull");
			vTaskDelay(10); //Delay the task
			xSemaphoreGive(TheBaconator.SausageMcmuffinSemaphore);
			}
			else {
				Serial.println("SemaphoreTakeFailed");
			}
		}
}
void BaconCookingTask(void *pvParameter) { //void *pvParameter required per reference manual page 38
	for (;true;) {
	Serial.println("We Made Bacon!");
	vTaskDelay(10); //Delay the task
	}
}

void ExecuteCookingTasks () {
	//std::cout<<"Waffle Semaphore Address is " << &BigBoiBaacon <<std::endl;
	//Serial.println(BigBoiBaacon.PoachedEggs.c_str());
	xTaskCreate( //Create higher priority task for WaffleMakingTask
	&WaffleMakingTask, //pointer to the task
	"hello_task", //Descriptive name for the task
	2048, //Number of words stack can hold (allocated to the task)
	NULL, //*pvParameter that can be passed to the function task (if needed)
	0, //Task priority, ranges from 0 (lowest) to (configMAX_PRIORITIES-1) (highest)
	NULL); //pass out a handle to the task being created

	/*xTaskCreate( //Create higher priority task for WaffleMakingTask
	&BaconCookingTask, //pointer to the task
	"hello_task", //Descriptive name for the task
	2048, //Number of words stack can hold (allocated to the task)
	*/ //NULL, //*pvParameter that can be passed to the function task (if needed)
	//5, //Task priority, ranges from 0 (lowest) to (configMAX_PRIORITIES-1) (highest)
	//NULL); //pass out a handle to the task being created
}
void WaffleIronSemaphore::CreateSemaphore() {
	if(debug_my_breakfast) Serial.println("Semaphore Creation Begin");
	SausageMcmuffinSemaphore=xSemaphoreCreateBinary();
	if (SausageMcmuffinSemaphore == NULL) {
		if(debug_my_breakfast) Serial.println("Semaphore Creation Failed");
	}
	else {
		if(debug_my_breakfast) Serial.println("Semaphore Creation Sucesfull");
		SemaphoreCook = SausageMcmuffinSemaphore;
	}
	if( xSemaphoreTake( SausageMcmuffinSemaphore, 0 ) == pdTRUE ) { //check if semaphore can be taken {
		Serial.println("Semaphore Take Success"); 
		}
		xSemaphoreGive(TheBaconator.SausageMcmuffinSemaphore);
}
WaffleIronSemaphore::WaffleIronSemaphore() {
	SausageMcmuffinSemaphore=NULL;
}
void WaffleIronSemaphore::TakeSemaphore() {
	SausageMcmuffinSemaphore=xSemaphoreCreateBinary();
}

void setup() {
	// put your setup code here, to run once:
	Serial.begin(9600);
	TheBaconator.CreateSemaphore();
	TheBaconator.PoachedEggs = "I Like Eggs";
	Serial.println(TheBaconator.PoachedEggs.c_str());
	//Pass objects
	//string eggss = "I Like Eggs";
	//char* eggss_test = eggss.cstr
	//Serial.println(TheBaconator.PoachedEggs.c_str());
	//Serial.println(eggss.c_str());
	//TheBaconator.PoachedEggs = "Poached Eggs Time";
	//std::cout <<"Address of TheBaconator is " << &TheBaconator << std::endl;
	ExecuteCookingTasks();
}

void loop() {
	// put your main code here, to run repeatedly:
	//Serial.println("I LIKE EGGS AND BACON");
}
